---
layout: post
title:      "CLI project"
date:       2020-10-22 11:41:32 -0400
permalink:  cli_project
---


When tasked to make a CLI project using an API, you gotta ask yourself what is a CLI? What is an API? What is life? Well a simple Google search let me know that a CLI is a command line interface and an API is an application program interface. Of course, duh! 

Now that we got those two things out of the way, it's important to note that the project was designed using Object Oriented Design. This means creating classes. "A class defines methods (definitions of behavior) and attributes (definitions of variables)." -Sandi Metz. These classes are the factory, with blueprints to create instances within the class that we can reuse to create as many instances as we want. These classes can then talk to one another by sending messages. Fun! 

Like all projects, challenges were encountered. First, setting up a github repository, or as the cool kids in tech say, a repo, and getting it to link to my IDE was painful. It looked so easy on video walkthroughs, and now I find it quite easy, but it took FOREVER for me to get this to work right. And once it started working right, it broke. I also tried using the in browser IDE, which proved even more painful, so switched back to the downloaded IDE...less painful. I wish we could have set up visual studio code or something similar beforehand to avoid this wasted time. O well, such is life. The second hardest part of the project was finding a good API to work with. Holy heck was this tough. It seems like it would be so easy! I started off using an API from songsterr, and had a lot of trouble getting it to work. Turns out instead of using Net::HTTP, I had to use something called Rest-Client. Anyway, after A LOT of trouble I got the songsterr API to work, but decided to switch to a different more friendly API provided by studio-ghibli. Thank you studio-ghibli...'castle in the sky' is my favorite! 

Ok now with the challenges accounted for, I can stop complaining...phew! The rest of the project entails setting up classes, one for API, CLI, and Movies, and getting those files to talk to one another after running them into an environment file and then into a run file. Shout out to require_relative for making that happen! So basically, the API class takes in the url from studio ghibli's api, uses Net::HTTP and JSON.parse to get it into an array of hashes for us to iterate over while simultaneously creating movie class instances and setting properties that we established in the movie class via the attr_accessor method. This method was titled fetch and was made a class method by formally tilting it self.fetch. The movie class is at the same time collecting all the instances that are being created in an array, titled @@all. This friendly class variable will come in handy later in our CLI class. O yeah, the CLI class! So last but not least my CLI class has methods for the user to interact with. Mostly it utilizes the gets method to get user input, and in case the user adds in anything extra, we strip it! Shout out to the .strip method.  So when the program starts the CLI class greets the user and asks them if they want to see the list of movies. For whatever reason if they did not want to see the list, they can exit the program and are greeted by a Goodbye! If they say yes, they get the list of movies. This fun list of movies comes from our friendly @@all class variable. It gets called by typing in Movies.all (class and method) and then we iterate over that array using the .each method. We also give our user a nice number by adding in the with_index method. After the user sees the list of movies, they are asked which movie they liked to know more about. If they type in a number that is not valid, I have a method to make sure that the number is between the values that are allowed. This comes from the between? method. If they don't type in a right value, they get a message, "Sorry invalid input. Choose a valid number." Also, it is important to note that when we get the user's input, we have to subtract 1. Of course, that is because the array starts at 0, but the user is seeing it start at 1. So, if they wanted information on the first movie, they type in 1, the program subtracts 1, and we know to pull up the [0] or first array and then output that information. When we finally get the right index number, we can tell the program the index number by calling Moves.all again, setting that equal to a variable, and then passing that variable into the argument of the final method of the CLI class the display movie details method. This outputs the director, producer, and release date of the movie. The user can then either see the list of movies again, or exit the program in which they will be created by a Goodbye! 

And on that note, Goodbye! Hope you enjoyed the rundown of this project. 
